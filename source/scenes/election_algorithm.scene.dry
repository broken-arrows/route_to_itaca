title: Election
on-arrival: {!
// TODO: this is only for the national constituent assembly election. Petrograd elections will be different.
// calculate normalized class voting amounts (0 to 100)

for (var c of Q.classes) {
    var class_votes = 0;
    for (var party of Q.parties) {
        if (party == "none") {
            continue;
        }
        if (!Q[c+'_'+party] || Q[c+'_'+party] < 0) {
            Q[c+'_'+party] = 0;
        }
        class_votes += Q[c+'_'+party];
    }
    for (var party of Q.parties) {
        Q[c + '_' + party + '_normalized'] = 100*Q[c+'_'+party]/class_votes;
        Q[c + '_' + party + '_display'] = Math.round(100*Q[c+'_'+party]/class_votes);
    }
}

// 1. calculate support for each of the parties
var total_support = 0;
for (var party of Q.parties) {
    if (party == "none" || party == "anarchist") {
        continue;
    }
    var party_support = 0;
    for (var c of Q.classes) {
        party_support += Q[c]*Q[c+'_'+party+'_normalized'];
    }
    for (var c of Q.minorities) {
        if (Q[c + '_' + party]) {
            party_support += Q[c]*Q[c + '_' + party];
        }
    }
    Q[party + '_support'] = party_support;
    total_support += party_support;
}
// Calculate support for minority parties
for (var party of Q.minority_parties) {
    var m_party_support = 0;
    for (var c of Q.minorities) {
        if (Q[c + '_' + party]) {
            m_party_support += Q[c]*Q[c + '_' + party];
        }
    }
    Q[party + '_support'] = m_party_support;
    total_support += m_party_support;
}
// 2. normalize support (fraction)
// 3. Round to integers
// TODO: round to 1 decimal instead of rounding to integers
// to do that, we multiply party_normalized*1000 and divide the rounded number by 10.
for (var party of Q.parties) {
    if (party == "none" || party == "anarchist") {
        continue;
    }
    Q[party+'_assembly_normalized'] = Q[party + '_support']/total_support;
    Q[party+'_assembly_votes_dec'] = Math.round(Q[party+'_assembly_normalized']*1000)/10;
    Q[party+'_assembly_votes'] = Math.round(Q[party+'_assembly_normalized']*100);
    //Q[party+'_votes'] = Q[party+'_votes_dec'];
    // display
    Q[party + '_assembly_votes_disp'] = Q[party+'_assembly_votes_dec'].toFixed(1);
}
for (var party of Q.minority_parties) {
    Q[party+'_assembly_normalized'] = Q[party + '_support']/total_support;
    Q[party+'_assembly_votes_dec'] = Math.round(Q[party+'_assembly_normalized']*1000)/10;
    Q[party+'_assembly_votes'] = Math.round(Q[party+'_assembly_normalized']*100);
    //Q[party+'_votes'] = Q[party+'_votes_dec'];
    // display
    Q[party + '_assembly_votes_disp'] = Q[party+'_assembly_votes_dec'].toFixed(1);
}
!}
go-to: jumpScene

# note: this is a helpful utility to deal with elections and so on.


######################################## Parlament de Catalunya
@cat_parlament
title: Catalan Parlament Elections
on-arrival: {! 
// Store old results
for (var p of Q.parties) {
    // I.e. we show the party in the results table also if they HAD seats in the previous election
    // Some shenanigans may be needed for handling the name changing parties, WIP!

    if (Q[p+'_parlament_s'] > 0) {
        Q[p+'_parlament_showviz'] = 1;
    } else {
        Q[p+'_parlament_showviz'] = 0;
    }
    Q[p+'_parlament_pv_old'] = Q[p+'_parlament_pv'];
    Q[p+'_parlament_s_old'] = Q[p+'_parlament_s'];
    console.log(`Party ${p} old seats: ${Q[p+'_parlament_s']}`);
}

// SPACE for the ACTUAL RESULT CALCULATION
// for now, historical results nov 2012

// Popular vote percentage
Q.ciu_parlament_pv = 30.7;
Q.erc_parlament_pv = 13.7;
Q.psc_parlament_pv = 14.4;
Q.ppc_parlament_pv = 13.0;
Q.icv_parlament_pv = 9.9;
Q.cs_parlament_pv = 7.6;
Q.cup_parlament_pv = 3.5;
Q.si_parlament_pv = 1.3;

// Seats in parlament
Q.ciu_parlament_s = 50;
Q.erc_parlament_s = 21;
Q.psc_parlament_s = 20;
Q.ppc_parlament_s = 19;
Q.icv_parlament_s = 13;
Q.cs_parlament_s = 9;
Q.cup_parlament_s = 3;
Q.si_parlament_s = 0;


// Calculate percent of parlament control and deltas
for (var p of Q.parties) {
    if (Q[p+'_parlament_s'] > 0) {
        Q[p+'_parlament_spc'] = Math.round(Q[p+'_parlament_s'] / Q.parlament_size * 1000) / 10;
        Q[p+'_parlament_showviz'] = 1;
    } else {
        Q[p+'_parlament_spc'] = 0;
    }
    if (Q[p+'_parlament_s_old'] == 0 || !Q[p+'_parlament_s_old']) {
        Q[p+'_parlament_s_delta'] = <div style='width: 100%; text-align: center; font-style: italic;'> 'New!'</div>;
        Q[p+'_parlament_pv_delta'] = <div style='text-align: center; font-style: italic;'> 'New!'</div>;
    } else {
        Q[p+'_parlament_s_delta'] = Q[p+'_parlament_s'] - Q[p+'_parlament_s_old'];
        var sign1 = Q[p+'_parlament_s_delta'] > 0 ?
            '<img src="img/arrowup.png"> ' :
            Q[p+'_parlament_s_delta'] < 0 ? '<img src="img/arrowdown.png"> ' :
            '<img src="img/steady.png"> ';
        Q[p+'_parlament_s_delta'] = sign1 + Math.abs(Q[p+'_parlament_s_delta'])
        Q[p+'_parlament_pv_delta'] = Q[p+'_parlament_pv'] - Q[p+'_parlament_pv_old'];
        var sign2 = Q[p+'_parlament_pv_delta'] > 0 ?
            '<img src="img/arrowup.png"> ' :
            Q[p+'_parlament_pv_delta'] < 0 ? '<img src="img/arrowdown.png"> ' :
            '<img src="img/steady.png"> ';
        Q[p+'_parlament_pv_delta'] = sign2 + Math.abs(Q[p+'_parlament_pv_delta']).toFixed(1) + '%';
    }
}

// Calculate block votes
Q.independence_parlament_pv = Q.ciu_parlament_pv + Q.erc_parlament_pv + Q.cup_parlament_pv + Q.junts_parlament_pv + Q.cdc_parlament_pv + Q.pdcat_parlament_pv + Q.jxsi_parlament_pv + Q.ac_parlament_pv + Q.si_parlament_pv ;
Q.independence_parlament_s = Q.ciu_parlament_s + Q.erc_parlament_s + Q.cup_parlament_s + Q.junts_parlament_s + Q.cdc_parlament_s + Q.pdcat_parlament_s + Q.jxsi_parlament_s + Q.ac_parlament_s + Q.si_parlament_s ;
Q.independence_parlament_spc = Math.round(Q.independence_parlament_s / Q.parlament_size * 1000) / 10;

Q.unionist_parlament_pv = Q.ppc_parlament_pv + Q.psc_parlament_pv + Q.cs_parlament_pv + Q.vox_parlament_pv + Q.ecp_parlament_pv;
Q.unionist_parlament_s = Q.ppc_parlament_s + Q.psc_parlament_s + Q.cs_parlament_s + Q.vox_parlament_s + Q.ecp_parlament_s;
Q.unionist_parlament_spc = Math.round(Q.unionist_parlament_s / Q.parlament_size * 1000) / 10;

Q.nonaligned_parlament_pv = Q.unio_parlament_pv + Q.icv_parlament_pv + Q.csqp_parlament_pv + Q.cecp_parlament_pv;
Q.nonaligned_parlament_s = Q.unio_parlament_s + Q.icv_parlament_s + Q.csqp_parlament_s + Q.cecp_parlament_s;
Q.nonaligned_parlament_spc = Math.round(Q.nonaligned_parlament_s / Q.parlament_size * 1000) / 10;


!}
go-to: jumpScene

######################################### Petrograd Soviet
@petrograd_soviet
title: Petrograd Soviet Elections
on-arrival: {!
var petrograd_classes = ["workers", "soldiers"];

for (var c of petrograd_classes) {
    var class_votes = 0;
    for (var party of Q.parties) {
        if (party == "none") {
            continue;
        }
        if (!Q[c+'_'+party] || Q[c+'_'+party] < 0) {
            Q[c+'_'+party] = 0;
        }
        class_votes += Q[c+'_'+party];
    }
    for (var party of Q.parties) {
        Q[c + '_' + party + '_normalized'] = 100*Q[c+'_'+party]/class_votes;
        Q[c + '_' + party + '_display'] = Math.round(100*Q[c+'_'+party]/class_votes);
    }
}

// 1. calculate support for each of the parties
var total_support = 0;
for (var party of Q.parties) {
    if (party == "none") {
        continue;
    }

    var party_support = 0;
    for (var c of petrograd_classes) {
        party_support += Q[c + '_petrograd']*Q[c+'_'+party+'_normalized'];
    }
    if (Q[party + '_soviet_bonus']) {
      party_support += Q[party + '_soviet_bonus'];
    }
    Q[party + '_support'] = party_support;
    total_support += party_support;
}
// 2. normalize support (fraction)
// 3. Round to integers
// TODO: round to 1 decimal instead of rounding to integers
// to do that, we multiply party_normalized*1000 and divide the rounded number by 10.
for (var party of Q.parties) {
    if (party == "none") {
        continue;
    }
    Q[party+'_soviet_normalized'] = Q[party + '_support']/total_support;
    Q[party+'_soviet_votes_dec'] = Math.round(Q[party+'_soviet_normalized']*1000)/10;
    Q[party+'_soviet_votes'] = Math.round(Q[party+'_soviet_normalized']*100);
    Q[party + '_soviet_votes_disp'] = Q[party+'_soviet_votes_dec'].toFixed(1);
}
!}
go-to: jumpScene


######################################### All-Russian Soviet
@all_russian_soviet
title: All-Russian Soviet Elections
on-arrival: {!
var soviet_classes = ["workers", "soldiers"];

for (var c of soviet_classes) {
    var class_votes = 0;
    for (var party of Q.parties) {
    if (party == "none") {
        continue;
    }

        if (!Q[c+'_'+party] || Q[c+'_'+party] < 0) {
            Q[c+'_'+party] = 0;
        }
        class_votes += Q[c+'_'+party];
    }
    for (var party of Q.parties) {
        Q[c + '_' + party + '_normalized'] = 100*Q[c+'_'+party]/class_votes;
        Q[c + '_' + party + '_display'] = Math.round(100*Q[c+'_'+party]/class_votes);
    }
}

// 1. calculate support for each of the parties
var total_support = 0;
for (var party of Q.parties) {
    if (party == "none") {
        continue;
    }

    var party_support = 0;
    for (var c of soviet_classes) {
        party_support += Q[c]*Q[c+'_'+party+'_normalized'];
    }
    Q[party + '_support'] = party_support;
    total_support += party_support;
}
// 2. normalize support (fraction)
// 3. Round to integers
// TODO: round to 1 decimal instead of rounding to integers
// to do that, we multiply party_normalized*1000 and divide the rounded number by 10.
for (var party of Q.parties) {
    if (party == "none") {
        continue;
    }

    Q[party+'_soviet_normalized'] = Q[party + '_support']/total_support;
    Q[party+'_soviet_votes_dec'] = Math.round(Q[party+'_soviet_normalized']*1000)/10;
    Q[party+'_soviet_votes'] = Math.round(Q[party+'_soviet_normalized']*100);
    Q[party + '_soviet_votes_disp'] = Q[party+'_soviet_votes_dec'].toFixed(1);
}
!}
go-to: jumpScene

######################################### Petrograd City Duma
@petrograd_duma
title: Petrograd Duma Elections
on-arrival: {!

for (var c of Q.classes) {
    var class_votes = 0;
    for (var party of Q.parties) {
    if (party == "none") {
        continue;
    }

        if (!Q[c+'_'+party] || Q[c+'_'+party] < 0) {
            Q[c+'_'+party] = 0;
        }
        class_votes += Q[c+'_'+party];
    }
    for (var party of Q.parties) {
        Q[c + '_' + party + '_normalized'] = 100*Q[c+'_'+party]/class_votes;
        Q[c + '_' + party + '_display'] = Math.round(100*Q[c+'_'+party]/class_votes);
    }
}

// 1. calculate support for each of the parties
var total_support = 0;
for (var party of Q.parties) {
    if (party == "none" || party == "anarchist") {
        continue;
    }

    var party_support = 0;
    for (var c of Q.classes) {
        party_support += Q[c + '_petrograd']*Q[c+'_'+party+'_normalized'];
    }
    Q[party + '_support'] = party_support;
    total_support += party_support;
}
// 2. normalize support (fraction)
// 3. Round to integers
// TODO: round to 1 decimal instead of rounding to integers
// to do that, we multiply party_normalized*1000 and divide the rounded number by 10.
for (var party of Q.parties) {
    if (party == "none" || party == "anarchist") {
        continue;
    }

    Q[party+'_city_duma_normalized'] = Q[party + '_support']/total_support;
    Q[party+'_city_duma_votes_dec'] = Math.round(Q[party+'_city_duma_normalized']*1000)/10;
    Q[party+'_city_duma_votes'] = Math.round(Q[party+'_city_duma_normalized']*100);
    Q[party + '_city_duma_votes_disp'] = Q[party+'_city_duma_votes_dec'].toFixed(1);
}
!}
go-to: jumpScene

