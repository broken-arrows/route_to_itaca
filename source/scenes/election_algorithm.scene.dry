title: Election
on-arrival: {!
// TODO: this is only for the national constituent assembly election. Petrograd elections will be different.
// calculate normalized class voting amounts (0 to 100)

for (var c of Q.classes) {
    var class_votes = 0;
    for (var party of Q.parties) {
        if (party == "none") {
            continue;
        }
        if (!Q[c+'_'+party] || Q[c+'_'+party] < 0) {
            Q[c+'_'+party] = 0;
        }
        class_votes += Q[c+'_'+party];
    }
    for (var party of Q.parties) {
        Q[c + '_' + party + '_normalized'] = 100*Q[c+'_'+party]/class_votes;
        Q[c + '_' + party + '_display'] = Math.round(100*Q[c+'_'+party]/class_votes);
    }
}

// 1. calculate support for each of the parties
var total_support = 0;
for (var party of Q.parties) {
    if (party == "none" || party == "anarchist") {
        continue;
    }
    var party_support = 0;
    for (var c of Q.classes) {
        party_support += Q[c]*Q[c+'_'+party+'_normalized'];
    }
    for (var c of Q.minorities) {
        if (Q[c + '_' + party]) {
            party_support += Q[c]*Q[c + '_' + party];
        }
    }
    Q[party + '_support'] = party_support;
    total_support += party_support;
}
// Calculate support for minority parties
for (var party of Q.minority_parties) {
    var m_party_support = 0;
    for (var c of Q.minorities) {
        if (Q[c + '_' + party]) {
            m_party_support += Q[c]*Q[c + '_' + party];
        }
    }
    Q[party + '_support'] = m_party_support;
    total_support += m_party_support;
}
// 2. normalize support (fraction)
// 3. Round to integers
// TODO: round to 1 decimal instead of rounding to integers
// to do that, we multiply party_normalized*1000 and divide the rounded number by 10.
for (var party of Q.parties) {
    if (party == "none" || party == "anarchist") {
        continue;
    }
    Q[party+'_assembly_normalized'] = Q[party + '_support']/total_support;
    Q[party+'_assembly_votes_dec'] = Math.round(Q[party+'_assembly_normalized']*1000)/10;
    Q[party+'_assembly_votes'] = Math.round(Q[party+'_assembly_normalized']*100);
    //Q[party+'_votes'] = Q[party+'_votes_dec'];
    // display
    Q[party + '_assembly_votes_disp'] = Q[party+'_assembly_votes_dec'].toFixed(1);
}
for (var party of Q.minority_parties) {
    Q[party+'_assembly_normalized'] = Q[party + '_support']/total_support;
    Q[party+'_assembly_votes_dec'] = Math.round(Q[party+'_assembly_normalized']*1000)/10;
    Q[party+'_assembly_votes'] = Math.round(Q[party+'_assembly_normalized']*100);
    //Q[party+'_votes'] = Q[party+'_votes_dec'];
    // display
    Q[party + '_assembly_votes_disp'] = Q[party+'_assembly_votes_dec'].toFixed(1);
}
!}
go-to: jumpScene

# note: this is a helpful utility to deal with elections and so on.


######################################## Parlament de Catalunya
@cat_parlament
title: Catalan Parlament Elections
on-arrival: {! 
// Copy historical results for visualization test
Q.ciu_parlament = Q.ciu_parlament_r;
Q.erc_parlament = Q.erc_parlament_r;
Q.psc_parlament = Q.psc_parlament_r;
Q.ppc_parlament = Q.ppc_parlament_r;
Q.icv_parlament = Q.icv_parlament_r;
Q.cs_parlament = Q.cs_parlament_r;
Q.cup_parlament = Q.cup_parlament_r;
!}
go-to: jumpScene

######################################### Petrograd Soviet
@petrograd_soviet
title: Petrograd Soviet Elections
on-arrival: {!
var petrograd_classes = ["workers", "soldiers"];

for (var c of petrograd_classes) {
    var class_votes = 0;
    for (var party of Q.parties) {
        if (party == "none") {
            continue;
        }
        if (!Q[c+'_'+party] || Q[c+'_'+party] < 0) {
            Q[c+'_'+party] = 0;
        }
        class_votes += Q[c+'_'+party];
    }
    for (var party of Q.parties) {
        Q[c + '_' + party + '_normalized'] = 100*Q[c+'_'+party]/class_votes;
        Q[c + '_' + party + '_display'] = Math.round(100*Q[c+'_'+party]/class_votes);
    }
}

// 1. calculate support for each of the parties
var total_support = 0;
for (var party of Q.parties) {
    if (party == "none") {
        continue;
    }

    var party_support = 0;
    for (var c of petrograd_classes) {
        party_support += Q[c + '_petrograd']*Q[c+'_'+party+'_normalized'];
    }
    if (Q[party + '_soviet_bonus']) {
      party_support += Q[party + '_soviet_bonus'];
    }
    Q[party + '_support'] = party_support;
    total_support += party_support;
}
// 2. normalize support (fraction)
// 3. Round to integers
// TODO: round to 1 decimal instead of rounding to integers
// to do that, we multiply party_normalized*1000 and divide the rounded number by 10.
for (var party of Q.parties) {
    if (party == "none") {
        continue;
    }
    Q[party+'_soviet_normalized'] = Q[party + '_support']/total_support;
    Q[party+'_soviet_votes_dec'] = Math.round(Q[party+'_soviet_normalized']*1000)/10;
    Q[party+'_soviet_votes'] = Math.round(Q[party+'_soviet_normalized']*100);
    Q[party + '_soviet_votes_disp'] = Q[party+'_soviet_votes_dec'].toFixed(1);
}
!}
go-to: jumpScene


######################################### All-Russian Soviet
@all_russian_soviet
title: All-Russian Soviet Elections
on-arrival: {!
var soviet_classes = ["workers", "soldiers"];

for (var c of soviet_classes) {
    var class_votes = 0;
    for (var party of Q.parties) {
    if (party == "none") {
        continue;
    }

        if (!Q[c+'_'+party] || Q[c+'_'+party] < 0) {
            Q[c+'_'+party] = 0;
        }
        class_votes += Q[c+'_'+party];
    }
    for (var party of Q.parties) {
        Q[c + '_' + party + '_normalized'] = 100*Q[c+'_'+party]/class_votes;
        Q[c + '_' + party + '_display'] = Math.round(100*Q[c+'_'+party]/class_votes);
    }
}

// 1. calculate support for each of the parties
var total_support = 0;
for (var party of Q.parties) {
    if (party == "none") {
        continue;
    }

    var party_support = 0;
    for (var c of soviet_classes) {
        party_support += Q[c]*Q[c+'_'+party+'_normalized'];
    }
    Q[party + '_support'] = party_support;
    total_support += party_support;
}
// 2. normalize support (fraction)
// 3. Round to integers
// TODO: round to 1 decimal instead of rounding to integers
// to do that, we multiply party_normalized*1000 and divide the rounded number by 10.
for (var party of Q.parties) {
    if (party == "none") {
        continue;
    }

    Q[party+'_soviet_normalized'] = Q[party + '_support']/total_support;
    Q[party+'_soviet_votes_dec'] = Math.round(Q[party+'_soviet_normalized']*1000)/10;
    Q[party+'_soviet_votes'] = Math.round(Q[party+'_soviet_normalized']*100);
    Q[party + '_soviet_votes_disp'] = Q[party+'_soviet_votes_dec'].toFixed(1);
}
!}
go-to: jumpScene

######################################### Petrograd City Duma
@petrograd_duma
title: Petrograd Duma Elections
on-arrival: {!

for (var c of Q.classes) {
    var class_votes = 0;
    for (var party of Q.parties) {
    if (party == "none") {
        continue;
    }

        if (!Q[c+'_'+party] || Q[c+'_'+party] < 0) {
            Q[c+'_'+party] = 0;
        }
        class_votes += Q[c+'_'+party];
    }
    for (var party of Q.parties) {
        Q[c + '_' + party + '_normalized'] = 100*Q[c+'_'+party]/class_votes;
        Q[c + '_' + party + '_display'] = Math.round(100*Q[c+'_'+party]/class_votes);
    }
}

// 1. calculate support for each of the parties
var total_support = 0;
for (var party of Q.parties) {
    if (party == "none" || party == "anarchist") {
        continue;
    }

    var party_support = 0;
    for (var c of Q.classes) {
        party_support += Q[c + '_petrograd']*Q[c+'_'+party+'_normalized'];
    }
    Q[party + '_support'] = party_support;
    total_support += party_support;
}
// 2. normalize support (fraction)
// 3. Round to integers
// TODO: round to 1 decimal instead of rounding to integers
// to do that, we multiply party_normalized*1000 and divide the rounded number by 10.
for (var party of Q.parties) {
    if (party == "none" || party == "anarchist") {
        continue;
    }

    Q[party+'_city_duma_normalized'] = Q[party + '_support']/total_support;
    Q[party+'_city_duma_votes_dec'] = Math.round(Q[party+'_city_duma_normalized']*1000)/10;
    Q[party+'_city_duma_votes'] = Math.round(Q[party+'_city_duma_normalized']*100);
    Q[party + '_city_duma_votes_disp'] = Q[party+'_city_duma_votes_dec'].toFixed(1);
}
!}
go-to: jumpScene

